type StakingRewardsData @entity {
  "staking rewards address"
  id: ID!
  "total staking volume and stakers"
  totalStakingVolume: BigInt!
  stakers: [String]!
  totalStakersCount: Int!
}

type StakingRewardsDayData @entity {
  id: ID!
  date: Int!
  dailyStakingVolume: BigInt!
  totalStakingVolume: BigInt!
}

type UserRewardsBlockData @entity {
  "{user_address}-{timestamp}"
  id: ID!
  rewardsVolumePerBlock: BigInt!
  totalRewardsVolume: BigInt!
  user: User!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type UserRewardsDayData @entity {
  "{user_address}-{day}"
  id: ID!
  dailyRewardsVolume: BigInt!
  user: User!
  date: Int!
}

type UserRewardsMonthData @entity {
  "{user_address}-{month}"
  id: ID!
  monthlyRewardsVolume: BigInt!
  user: User!
  date: Int!
}

type UserTransaction @entity {
  "{user_address}-{timestamp}"
  id: ID!
  amount: BigInt!
  user: User!
  timestamp: BigInt!
}

type User @entity {
  id: ID!
  lockedBalance: BigInt!
  earnedBalance: BigInt!
  userRewardsBlockDatas: [UserRewardsBlockData!]! @derivedFrom(field: "user")
  userRewardsDayDatas: [UserRewardsDayData!]! @derivedFrom(field: "user")
  userRewardsMonthDatas: [UserRewardsMonthData!]! @derivedFrom(field: "user")
  userTransactions: [UserTransaction!]! @derivedFrom(field: "user")
}
